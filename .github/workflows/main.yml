# This is a basic workflow to help you get started with Actions
name: CI
# Controls when the workflow will run
on:
  # Triggers the workflow on push or pull request events but only for the main branch
  push:
    branches: [ e2e-improvement ]
  pull_request:
    branches: [ e2e-improvement ]
  # Allows you to run this workflow manually from the Actions tab
  #workflow_dispatch:
# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build"
  run-tests:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest
    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v2
      - name: Install ChromeDriver
        run: |
          CHROME_VERSION=$(google-chrome --version | cut -f 3 -d ' ' | cut -d '.' -f 1) \
          && CHROMEDRIVER_RELEASE=$(curl --location --fail --retry 3 http://chromedriver.storage.googleapis.com/LATEST_RELEASE_${CHROME_VERSION}) \
          && curl --silent --show-error --location --fail --retry 3 --output /tmp/chromedriver_linux64.zip "http://chromedriver.storage.googleapis.com/$CHROMEDRIVER_RELEASE/chromedriver_linux64.zip" \
          && cd /tmp \
          && unzip chromedriver_linux64.zip \
          && rm -rf chromedriver_linux64.zip \
          && sudo mv chromedriver /usr/local/bin/chromedriver \
          && sudo chmod +x /usr/local/bin/chromedriver \
          && chromedriver --version
      #- uses: nanasess/setup-chromedriver@v1
      #- run: 
           #export DISPLAY=:99
           #chromedriver --url-base=/wd/hub &
           #sudo Xvfb -ac :99 -screen 0 1280x1024x24 > /dev/null 2>&1 & # optional
      - name: Build the stack
        run: docker compose up -d --build   
      - name: Test Frontend
        run: docker exec frontend yarn test
      - name: Test py backend
        run: docker exec backend-py python manage.py test
      - name: Test go backend
        run: docker exec backend-go go test -run="" ./pkg/...
      - uses: actions/setup-python@v2
        with:
          python-version: '3.x'
      - run: pip install -r e2e_tests/requirements.txt
      #- name: E2E Tests setup
      #  run: pip install -r requirements.txt
      #- name: e2e test
      - run: python e2e_tests/Test_pyService.py
      - name: Stop stack
        run: docker compose down  
